{"version":3,"sources":["serviceWorker.js","chat/Channel.js","chat/ChannelList.js","chat/Message.js","chat/MessagesPanel.js","chat/Chat.js","index.js"],"names":["Boolean","window","location","hostname","match","Channel","click","props","onClick","id","className","this","name","participants","React","Component","ChannelList","handleClick","onSelectChannel","list","channels","map","c","key","Message","senderName","text","MessagesPanel","state","input_value","send","onSendMessage","channel","setState","handleInput","e","target","value","messages","m","type","onChange","SERVER","Chat","socket","configureSocket","socketClient","on","handleChannelSelect","forEach","message","channel_id","push","loadChannels","a","fetch","then","response","json","data","find","emit","ack","handleSendMessage","Date","now","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.29e81850.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\n\r\nexport class Channel extends React.Component {\r\n\r\n    click = () => {\r\n        this.props.onClick(this.props.id);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='channel-item' onClick={this.click}>\r\n                <div>{this.props.name}</div>\r\n                <span>{this.props.participants}</span>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport { Channel } from './Channel';\r\n\r\nexport class ChannelList extends React.Component {\r\n\r\n    handleClick = id => {\r\n        this.props.onSelectChannel(id);\r\n    }\r\n\r\n    render() {\r\n\r\n        let list = <div className=\"no-content-message\">There is no channels to show</div>;\r\n        if (this.props.channels && this.props.channels.map) {\r\n            list = this.props.channels.map(c => <Channel key={c.id} id={c.id} name={c.name} participants={c.participants} onClick={this.handleClick} />);\r\n        }\r\n        return (\r\n            <div className='channel-list'>\r\n                {list}\r\n            </div>);\r\n    }\r\n\r\n}","import React from 'react';\r\n\r\n\r\nexport class Message extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className='message-item'>\r\n                <div><b>{this.props.senderName}</b></div>\r\n                <span>{this.props.text}</span>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport { Message } from './Message';\r\n\r\nexport class MessagesPanel extends React.Component {\r\n    state = { input_value: '' }\r\n    send = () => {\r\n        if (this.state.input_value && this.state.input_value !== '') {\r\n            this.props.onSendMessage(this.props.channel.id, this.state.input_value);\r\n            this.setState({ input_value: '' });\r\n        }\r\n    }\r\n\r\n    handleInput = e => {\r\n        this.setState({ input_value: e.target.value });\r\n    }\r\n\r\n    render() {\r\n\r\n        let list = <div className=\"no-content-message\">There is no messages to show</div>;\r\n        if (this.props.channel && this.props.channel.messages) {\r\n            list = this.props.channel.messages.map(m => <Message key={m.id} id={m.id} senderName={m.senderName} text={m.text} />);\r\n        }\r\n        return (\r\n            <div className='messages-panel'>\r\n                <div className=\"meesages-list\">{list}</div>\r\n                {this.props.channel &&\r\n                    <div className=\"messages-input\">\r\n                        <input type=\"text\" onChange={this.handleInput} value={this.state.input_value} />\r\n                        <button onClick={this.send}>Send</button>\r\n                    </div>\r\n                }\r\n            </div>);\r\n    }\r\n\r\n}","import React from 'react';\r\nimport { ChannelList } from './ChannelList';\r\nimport './chat.scss';\r\nimport { MessagesPanel } from './MessagesPanel';\r\nimport socketClient from \"socket.io-client\";\r\nconst SERVER = \"http://127.0.0.1:8080\";\r\nexport class Chat extends React.Component {\r\n\r\n    state = {\r\n        channels: null,\r\n        socket: null,\r\n        channel: null\r\n    }\r\n    socket;\r\n    componentDidMount() {\r\n        this.loadChannels();\r\n        this.configureSocket();\r\n    }\r\n\r\n    configureSocket = () => {\r\n        var socket = socketClient(SERVER);\r\n        socket.on('connection', () => {\r\n            if (this.state.channel) {\r\n                this.handleChannelSelect(this.state.channel.id);\r\n            }\r\n        });\r\n        socket.on('channel', channel => {\r\n            \r\n            let channels = this.state.channels;\r\n            channels.forEach(c => {\r\n                if (c.id === channel.id) {\r\n                    c.participants = channel.participants;\r\n                }\r\n            });\r\n            this.setState({ channels });\r\n        });\r\n        socket.on('message', message => {\r\n            \r\n            let channels = this.state.channels\r\n            channels.forEach(c => {\r\n                if (c.id === message.channel_id) {\r\n                    if (!c.messages) {\r\n                        c.messages = [message];\r\n                    } else {\r\n                        c.messages.push(message);\r\n                    }\r\n                }\r\n            });\r\n            this.setState({ channels });\r\n        });\r\n        this.socket = socket;\r\n    }\r\n\r\n    loadChannels = async () => {\r\n        fetch('http://localhost:8080/getChannels').then(async response => {\r\n            let data = await response.json();\r\n            this.setState({ channels: data.channels });\r\n        })\r\n    }\r\n\r\n    handleChannelSelect = id => {\r\n        let channel = this.state.channels.find(c => {\r\n            return c.id === id;\r\n        });\r\n        this.setState({ channel });\r\n        this.socket.emit('channel-join', id, ack => {\r\n        });\r\n    }\r\n\r\n    handleSendMessage = (channel_id, text) => {\r\n        this.socket.emit('send-message', { channel_id, text, senderName: this.socket.id, id: Date.now() });\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className='chat-app'>\r\n                <ChannelList channels={this.state.channels} onSelectChannel={this.handleChannelSelect} />\r\n                <MessagesPanel onSendMessage={this.handleSendMessage} channel={this.state.channel} />\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Chat } from './chat/Chat';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Chat />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}